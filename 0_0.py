# -*- coding: utf-8 -*-

str = "stressed"
#print(len(t))#8がでる
#n = 1


print("元の単語:" + str)
#死ぬほどシンプル
print("作った答え:" + str[-1]+str[-2]+str[-3]+str[-4]+str[-5]+str[-6]+str[-7]+str[-8])

#解答・解説編
#スライスという記法がある
print("番号指定, str[0]:" + str[0])#s
print("番号指定, str[-1]:" + str[-1])#d

#ここからスライス
#--スライスとは？
# 文字列インデックス[開始インデックス:終了インデックス:ステップ数]という形
#文字列の一部を切り取って取得する操作方法

print("スライス, str[0:4]:" + str[0:4])#stre
print("スライス, str[0:-3]:" + str[0:-3])#stres #str[0:5]と同義
print("スライス, str[:2]:" + str[:2])#st 開始インデックスを省略する
print("スライス, str[3:]:" + str[3:])#essed 3()+1)文字目から全部

###ステップ数を指定する
#print("ステップ数のスライス, str[0:6:2]:" + str[0:6:2])#飛び飛びの文字を指定する。これは0,2,4番目の文字が出力される
###じゃあ例えば1,3,5で出力させるなら？おそらく[最初のスタート:最後:いくつ飛び？]
#print("ステップ数のスライス, str[1:6:2]:" + str[1:6:2])#できてる！
###じゃあ3文字飛びは？
#print("ステップ数のスライス, str[0:6:3]:" + str[0:6:3])#予想はrs 答えはse
###rsを出すには？？？
#print("ステップ数のスライス, str[1:6:3]:" + str[1:6:3])#次こそrs 鍛えはts
###規則性をしっかり見出してみてほしい
###1文字飛びでrsを取り出す
print("ステップ数のスライス, str[1:5:2]:" + str[2:5:2])#2(3)番目の文字から初めて、途中で終わらせてて1文字飛び

#最初と最後は省略もできる(おそらく最初と最後は元の文字数で保持？つまり3飛びになるから)
print("ステップ数のスライス, str[::3]:" + str[::3])#予想はrs 答えはsee
#0番目, 3番目, 6番目では？ #正解っぽい
print("ステップ数のスライス, str[-3::2]:" + str[-3::2])#これは何が出る？
#負の数が最初に入るので、後ろから数える。
#つまり後ろから3番目sから開始して、2飛び　#飛ぶのは、あくまでも文字順
print("ステップ数のスライス, str[-3::1]:" + str[-3::1])#sed
#ステップ数を負の順にすることで、文字の順番に逆らう
print("ステップ数のスライス, str[-1::-2]:" + str[-1::-2])#最後の文字から開始して、文字の逆に2飛び？
#dsetになってくれればしあわせ #しあわせ！
#じゃあ今回は最後の文字から逆順に並んでくれればいいので
print("解答, str[0:-1:-1]:" + str[-1::-1])#だけど最初と次の数は省略できる
#解答
print(str[::-1])
